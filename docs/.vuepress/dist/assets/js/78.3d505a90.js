(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{517:function(t,s,a){"use strict";a.r(s);var n=a(30),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_15-dom扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-dom扩展"}},[t._v("#")]),t._v(" 15. DOM扩展")]),t._v(" "),a("p",[t._v("DOM API 已经非常完善了，但为了实现更多功能，仍有一些标准或专有扩展。2008 年前，大部分浏览器对 DOM 扩展都是专有的。此后 W3C 开始着手将这些已成为事实标准的专有扩展编制成正式规范。于是就产生了描述 DOM 扩展的两个标准：Selectors API 与 HTML5。另外还有较小的 Element Traversal（遍历） 规范，增加了一些 DOM 属性。")]),t._v(" "),a("h2",{attrs:{id:"selectors-api-选择符api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#selectors-api-选择符api"}},[t._v("#")]),t._v(" Selectors API(选择符API)")]),t._v(" "),a("blockquote",[a("p",[t._v("jQuery 核心是通过 css 选择符查询 DOM 文档取得元素引用，从而抛开了 getElementById 和 getElementsByTagName, Selectors API 是由 W3C 发起定制的一个标准，让浏览器原生支持 css 查询。")])]),t._v(" "),a("p",[t._v("Selectors API Level 1 规范核心方法 querySelector()、querySelectorAll()，可以通过 Document 和 Element 实列来调用")]),t._v(" "),a("p",[t._v("Selectors API Level 2 规范在 Element 类型上新增了更多方法，比如 matches()、find()、findAll()。 目前还没有浏览器实现 find()、findAll() 方法")]),t._v(" "),a("h3",{attrs:{id:"queryselector"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queryselector"}},[t._v("#")]),t._v(" querySelector()")]),t._v(" "),a("p",[t._v("只能获取到一个元素，获取不到元素，返回 null， 如果传入的选择符不符合规范，会抛出错误。querySelector' on 'Document': '#d133#' is not a valid selector")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <div id='d1'>111111</div>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <div id='d2'>2222</div>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <p class='c1'>c1</p>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <span class='c1'>c2</span>")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'body'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取body元素")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#d1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取ID为 d1 的元素")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.selected'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取class为selected的第一个元素")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'img.button'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取类为button的第一个img元素")]),t._v("\n")])])]),a("h3",{attrs:{id:"queryslectorall"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queryslectorall"}},[t._v("#")]),t._v(" querySlectorAll()")]),t._v(" "),a("p",[t._v("它返回的节点不止一个，而是 NodeList 类数组对象，和 childNodes 的 NodeList 活动对象不一样的是，这里的 NodeList 实例是一个静态的快照，而非实时查询。可以使用 for...of、forEach、数组下标、item() 进行遍历或取值")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelectorAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取 div元素列表")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取 id 为 myDiv 的元素中所有的 em 元素")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myDiv"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelectorAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'em'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelectorAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.selected'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取类为selected的所有元素")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelectorAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'p strong'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取所有p元素中的所有strong元素")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 便利NodeList里面的元素")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" strong"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" strongs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  strong "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" strong"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于 strongs.item(i)")]),t._v("\n  strong"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("className "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'important'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"matches-原-matchesselector"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#matches-原-matchesselector"}},[t._v("#")]),t._v(" matches()(原 matchesSelector())")]),t._v(" "),a("p",[t._v("matches 是 Selectors API Level 2 规范为 Element 新增的方法，规范的草案中称为 matchesSelector，接收一个 css 选择符参数。如果调用的元素与该选择符匹配则返回 true，否则返回 false。它可以方便的检测某个元素是否会被 querySelector() 或 querySelectorAll() 方法返回。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'body.page1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"元素遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元素遍历"}},[t._v("#")]),t._v(" 元素遍历")]),t._v(" "),a("p",[t._v("Element Traversal规范API, 对于元素间的空格，IE9 及之前的版本不会返回文本节点，其他浏览器都会返回文本节点。这导致使用 childNodes 和 firstChild 时行为不一致。为了弥补差异，又保持 DOM 规范不变，Element Traversal 规范新定义了一组属性, 支持该规范的有 IE9+")]),t._v(" "),a("ul",[a("li",[t._v("childElementCount 返回子元素的个数，不包含文本节点及注释节点")]),t._v(" "),a("li",[t._v("firstElementChild 指向第一个子元素, firstChild 的元素版")]),t._v(" "),a("li",[t._v("lastElementChild 指向最后一个元素，lastChild 的元素版")]),t._v(" "),a("li",[t._v("previousElementSibling  指向前一个同辈元素；previousSibling 元素版")]),t._v(" "),a("li",[t._v("nextElementSibling 指向后一个同辈元素 nextSibling的元素版")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 过去的写法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fitstChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nodeType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 检查是不是元素")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("processChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  child "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextSibling\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Element Traversal 新写法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstElementChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastElementChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("processChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 已知是元素节点")]),t._v("\n  child "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextElementSibling\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"html5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#html5"}},[t._v("#")]),t._v(" HTML5")]),t._v(" "),a("p",[t._v("HTML5 代表与 HTML 截然不同的方向。以前的 HTML 规范中，从未出现过描述 JavaScript 接口的情形。HTML 是纯标记语言，JavaScript 绑定的事情，一般交给 DOM 规范去定义。然而 HTML5 规范却包含了与标记相关的大量 JavaScript API 定义。其中有的与 DOM 重合，定义了浏览器应该提供的 DOM 扩展。")]),t._v(" "),a("h3",{attrs:{id:"css扩展-getelementsbyclassname-与classlist属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css扩展-getelementsbyclassname-与classlist属性"}},[t._v("#")]),t._v(" css扩展 getElementsByClassName()与classList属性")]),t._v(" "),a("p",[t._v("获取指定类名的元素 List，IE9+，类型为 HTMLCollection")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取类中包含username和cureent的元素，类名先后顺序无所谓")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementsByClassName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'username cureent'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("管理某个元素的 class 属性，IE10+")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// <div class="bd user disabled">...</div>')]),t._v("\ndiv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("classList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bd'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 移除bd class")]),t._v("\ndiv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("classList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bd'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否包含bd class")]),t._v("\ndiv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("classList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'opt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新增一个className")]),t._v("\ndiv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("classList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toggle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'add-or-del'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果有该class，删除该class，如果没有则添加该class")]),t._v("\n\ndiv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("classList "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DOMTokenList 数组")]),t._v("\ndiv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("classList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取class属性  IE11不支持，edge、chrome、firefox都支持")]),t._v("\ndiv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("classList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'kkk uu'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 修改class属性  IE11不支持，edge、chrome、firefox都支持")]),t._v("\n")])])]),a("h3",{attrs:{id:"焦点管理-focus-hasfocus"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#焦点管理-focus-hasfocus"}},[t._v("#")]),t._v(" 焦点管理 focus()，hasFocus()")]),t._v(" "),a("p",[t._v("默认情况下，文档刚加载完成，document.activeElement 保存的是 documen.body 的引用。加载期间值为 ßßßnul")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" button "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myButton'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nbutton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("focus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自动获取焦点")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("activeElement "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" button "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasFocus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true 文档是否拥有焦点")]),t._v("\n")])])]),a("h3",{attrs:{id:"htmldocument-扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#htmldocument-扩展"}},[t._v("#")]),t._v(" HTMLDocument 扩展")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("document.readyState")]),t._v(" 属性, loading 正在加载文档，complete 已经加载完文档")]),t._v(" "),a("li",[a("code",[t._v("document.compatMode")]),t._v(" 属性, 浏览器当前处于什么渲染模式 CSS1Compat 标准模式，BackCompat 混杂模式")]),t._v(" "),a("li",[a("code",[t._v("document.head")]),t._v(" 直接取 head 元素")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readyState "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'complete'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行操作")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("compatMode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'CSS1Compat'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'standards mode'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 标准模式")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 混杂模式 BackCompat")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'quirks mode'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementsByTagName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'head'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h3",{attrs:{id:"charset-字符集属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#charset-字符集属性"}},[t._v("#")]),t._v(" charset 字符集属性")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("charset "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'UTF-8'")]),t._v("\n")])])]),a("h3",{attrs:{id:"自定义数据属性-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义数据属性-data"}},[t._v("#")]),t._v(" 自定义数据属性：data-")]),t._v(" "),a("p",[t._v("HTML可以自定义数据属性，但要添加 "),a("code",[t._v("data-")]),t._v(" 前缀，如果定义了该属性，可以通过 dataset 属性来访问对应的扩展")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// <div id="myDiv" data-appId="12345" data-myname="Kevin"></div>')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" div "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myDiv'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取自定义属性的值")]),t._v("\ndiv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dataset "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// OMStringMap")]),t._v("\ndiv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dataset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("appId "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12345")]),t._v("\ndiv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dataset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("myname "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Kevin")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 直接赋值，克改变对应的值。")]),t._v("\n")])])]),a("h3",{attrs:{id:"插入标记-html"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入标记-html"}},[t._v("#")]),t._v(" 插入标记/HTML")]),t._v(" "),a("p",[t._v("DOM 虽然已经为操纵节点提供了很多 API，但向文档中一次性插入大量的 HTML 时还是比较麻烦的。HTML5 将 IE 发明的 innerHTML、outerHTML、insertAdjacentHTML、insertAdjacentText 纳入了标准。")]),t._v(" "),a("ul",[a("li",[t._v("innerHTML 属性，读取元素的 innerHTML 属性时，会返回元素所有后代的 HTML 字符串。包括元素、注释和文本节点。在写入 innerHTML 时，会将设置的字符串解析为 DOM 子树，并代替元素之前的所有子节点。"),a("strong",[t._v("现代浏览器中，通过 innerHTML 插入的 "),a("code",[t._v("<script>")]),t._v(" 标签，是不会执行的。在 IE8 及之前版本中，只要插入元素指定了 defer 属性，且 "),a("code",[t._v("<script>")]),t._v(" 之前是 scoped element(受控元素，能够在页面中看到的内容) 那就是可以执行的。")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// <div id="test">')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \t<div>child1</div>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \t<div>child2</div>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// </div>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <div>child1</div>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <div>child2</div>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "')]),t._v("\ndiv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// <div id="test">hello</div>')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// IE8 无法执行 <script> 字符串之前无 scoped element(页面可见的内容)")]),t._v("\ndiv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"<script defer>console.log('hi')<\\/script>\"")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下面是可以在 IE8 执行的")]),t._v("\ndiv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"_<script defer>console.log('hi')<\\/script>\"")]),t._v("\ndiv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"<div>&nbsp;</div><script defer>console.log('hi')<\\/script>\"")]),t._v("\n")])])]),a("ul",[a("li",[t._v("outerHTML 属性，获取元素的 HTML 字符串，元素本身加上其后代元素，相比 innerHTML 多了一个元素本身内容。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// <div id="test">')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \t<div>child1</div>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \t<div>child2</div>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// </div>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("outerHTML \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// \'<div id="test">')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     <div>child1</div>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     <div>child2</div>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   </div>'")]),t._v("\nt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("outerHTML "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<span>123</span>"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <span>123</span>")]),t._v("\n")])])]),a("ul",[a("li",[t._v("insertAdjacentHTML() 与 insertAdjacentText()，adjacent 意思是邻近的，毗连的。它可以指定 HTML 字符串或文本插入的位置。第一个参数为插入位置，第二个参数为字符串，第一个参数必须是下面 4 个常量字符串中的一个：\n"),a("ul",[a("li",[t._v('"beforebegin" 插入当前元素的前面，作为兄弟(sibling)节点。')]),t._v(" "),a("li",[t._v('"afterbegin" 插入当前元素内部，作为第一个子节点。')]),t._v(" "),a("li",[t._v('"beforeend" 插入当前元素内部，作为最后一个子节点。')]),t._v(" "),a("li",[t._v('"afterend" 插入当前元素后面，作为下一个同胞节点。')]),t._v(" "),a("li",[t._v("假设元素为  "),a("code",[t._v("<div>hello</div>")]),t._v("，begin 是以 "),a("code",[t._v("<div>")]),t._v(" 为基准，end 是以 "),a("code",[t._v("</div>")]),t._v(" 为基准")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作为前一个同辈元素插入")]),t._v("\nelement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertAdjacentHTML")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'beforebegin'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<p>hello</p>'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nelement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertAdjacentText")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'beforebegin'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作为第一个子元素插入")]),t._v("\nelement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertAdjacentHTML")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'afterbegin'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<p>hello</p>'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nelement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertAdjacentText")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'afterbegin'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作为最后一个子元素插入")]),t._v("\nelement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertAdjacentHTML")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'beforeend'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<p>hello</p>'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nelement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertAdjacentText")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'beforeend'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作为后一个同辈元素插入")]),t._v("\nelement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertAdjacentHTML")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'afterend'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<p>hello</p>'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nelement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertAdjacentText")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'afterend'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("内存与性能问题，上面介绍的替换子节点的方法，可能在浏览器中（特别是IE）导致内存问题。因为如果被移除的子树元素之前有关联的处理程序或 JS 对象。那他们之间的绑定关系会滞留在内存中。如果这种替换频繁发生，页面内存会持续攀升。使用上面的方法时，最后先手动删除要被替换的元素上关联的时间处理程序和 JS 对象。尽量减少这种操作。")]),t._v(" "),a("li",[t._v("跨站点脚本 XSS，尽管 innerHTML 不会执行自己创建的 script 元素标签，但仍然向恶意用户暴露了很大的攻击面。可以毫不费力的创建元素并执行 onclick 之类的属性。如果页面中要使用用户提供的信息，建议不要使用 innerHTML, 如果一定要使用，需要在插入前使用相关的防 XSS 库对他们进行转义。")])]),t._v(" "),a("h3",{attrs:{id:"scrollintoview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scrollintoview"}},[t._v("#")]),t._v(" scrollIntoView()")]),t._v(" "),a("p",[t._v("元素.scrollIntoView() 方法，滚动到对应的元素位置。滚动到对应的元素位置，注意只能是元素节点调用，文本节点调用会报错。参数分三种情况：")]),t._v(" "),a("ul",[a("li",[t._v("参数是一个布尔值，alginToTop，true 时元素与窗口顶部对齐，false 时元素与底部对齐")]),t._v(" "),a("li",[t._v("参数是一个对象 scrollIntoViewOptions\n"),a("ul",[a("li",[t._v('behavior 定义过渡动画，默认为 "auto"，"smooth" 表示平滑滚动')]),t._v(" "),a("li",[t._v('block 垂直方向对齐，"start"(顶部)，"center"(中间)，"end"(底部)、"nearest"(chrome无效)，默认为 "start"')]),t._v(" "),a("li",[t._v('inline 水平方向对齐，"start"，"center"，"end"，"nearest"，默认为 "nearest"')])])]),t._v(" "),a("li",[t._v("不传参数，等价于传 true 元素与窗口顶部对齐")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myDiv'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("scrollIntoView")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于 k.scrollIntoView(true)")]),t._v("\nk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("scrollIntoView")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 与底部对齐")]),t._v("\nk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("scrollIntoView")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  behavior"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"smooth"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  inline"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"start"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"专有扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#专有扩展"}},[t._v("#")]),t._v(" 专有扩展")]),t._v(" "),a("h3",{attrs:{id:"ie8文档模式-第四版已删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ie8文档模式-第四版已删除"}},[t._v("#")]),t._v(" IE8文档模式(第四版已删除)")]),t._v(" "),a("ul",[a("li",[t._v("IE8 引入了一个新的概念：文档模式 document.documentMode，只有 IE 支持，如果 IE11，值为 11，如果 IE8，值为 8，如果是其他浏览器，返回 undefined")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// IE的四种文档模式")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. IE5 以混杂模式渲染页面，IE8及跟高版本中的新功能都无法使用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. IE7 以IE7标准模式渲染页面，IE8及更高版本中的新功能都无法使用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. IE8 以IE8标准模式渲染页面，IE8里的新功能都可以使用，如Selectors API,css2级选择符和某些css3功能，IE9中的新功能无法使用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4. IE9 以IE9标准模式渲染页面，IE9中的新功能都可以使用，如ES5、完整的CSS3以及更多的HTML5功能")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 要强制浏览器以某种模式渲染页面，可以使用HTTP头部信息 X-UA-Compatible")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// <meta http-equiv="X-UA-Compatible" content="IE=IEVersion">')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// > IEVersion 有下面的一些值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// > Edge 始终以最新的文档模式来渲染页面，忽略文档类型声明，IE8以IE8标准模式渲染，IE9以IE9标准模式渲染")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// > EmulateIE9 如果有文档类型声明，则以IE9标准模式渲染，否则将文档模式设置为IE5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// > EmulateIE8 如果有文档类型声明，则以IE8标准模式渲染，否则将文档模式设置为IE5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// > EmulateIE7 如果有文档类型声明，则以IE7标准模式渲染，否则将文档模式设置为IE5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// > 9 强制以IE9标准模式渲染页面，忽略文档类型声明")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// > 8 强制以IE8标准模式渲染页面，忽略文档类型声明")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// > 7 强制以IE7标准模式渲染页面，忽略文档类型声明")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// > 5 强制将文档模式设置为IE5，忽略文档类型声明")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果想要让文档模式像在IE7中一样，可以使用如下代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// <meta http-equiv="X-UA-Compatible" content="IE=7">')]),t._v("\n\n")])])]),a("h3",{attrs:{id:"children属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#children属性"}},[t._v("#")]),t._v(" children属性")]),t._v(" "),a("p",[t._v("element.children 属性，IE9 之前处理文本节点空白符时有差异，就出现了 children 属性，相当于 childNodes 的元素版，只包含元素，childElementCount 只能计算数量，不能获取List，这个就可以取元素。类型是 HTMLCollection")]),t._v(" "),a("h3",{attrs:{id:"contains"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#contains"}},[t._v("#")]),t._v(" contains()")]),t._v(" "),a("p",[t._v("elementA.contains(elementB) 方法可以检测 elementA 是否包含 elementB，如果是，则返回true，反则返回false。DOM Level 3 compareDocumentPosition() 可以更详细的获得两节点关系，compareDocumentPosition() 返回值比较绕，详情参见书 p457。他们都是 IE9+ 支持")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("documentElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("documentElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareDocumentPosition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 20 0x14 ")]),t._v("\n")])])]),a("h3",{attrs:{id:"插入标记-文本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入标记-文本"}},[t._v("#")]),t._v(" 插入标记(文本)")]),t._v(" "),a("p",[t._v("HTML5 将 IE 发明的 innerHTML 和 outerHTML 纳入了标准，但还有两个属性没有入选。就是剩下的 innerText、outerText； 除 Firefox 外所有主流浏览器都支持 outerText，他是一个非标准化的属性，建议不要使用。")]),t._v(" "),a("p",[t._v("innerText 和 textContent 区别")]),t._v(" "),a("ol",[a("li",[t._v("innerText/textContent都是获取文本或插入文本。前者 Firefox45 不支持（2016年3月），但支持 textContent(IE9+)。现在已经都支持了。"),a("strong",[t._v("建议使用 innerText")])]),t._v(" "),a("li",[a("strong",[t._v("innerText 会忽略行类的样式和脚本，textContent 会返回行内样式和脚本代码")])])]),t._v(" "),a("h3",{attrs:{id:"滚动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#滚动"}},[t._v("#")]),t._v(" 滚动")]),t._v(" "),a("ul",[a("li",[t._v("滚动除了scrollIntoView()方法外，还有其他非标准方法可以使用，但兼容性不行")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. scrollIntoViewNeeded() 将元素移动到对应的元素节点，和 scrollIntoView()用法及功能基本一致")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 兼容性： https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoViewIfNeeded")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. window.scrollByLines(lineCount) ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// chrome不支持，Firefox支持")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. window.scrollByPages(pageCount) // 向上翻页或向下返回，仅火狐浏览器支持")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 兼容性: https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollByPages")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);