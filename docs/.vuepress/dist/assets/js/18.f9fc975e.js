(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{601:function(t,a,s){"use strict";s.r(a);var r=s(30),i=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git-笔记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-笔记"}},[t._v("#")]),t._v(" Git 笔记")]),t._v(" "),s("blockquote",[s("p",[t._v("参考："),s("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/896043488029600",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git教程 - 廖雪峰的官方网站"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"基本命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本命令"}},[t._v("#")]),t._v(" 基本命令")]),t._v(" "),s("ul",[s("li",[t._v("初始化一个Git仓库，使用 "),s("strong",[t._v("git init")]),t._v(" 命令。")]),t._v(" "),s("li",[t._v("添加文件到Git仓库，分两步：\n"),s("ul",[s("li",[t._v("使用命令 "),s("strong",[t._v("git add <file>")]),t._v("，注意，可反复多次使用，添加多个文件；每次修改，如果不用git add到暂存区，那就不会加入到commit中。")]),t._v(" "),s("li",[t._v("使用命令 "),s("strong",[t._v("git commit -m <message>")]),t._v("，完成。")])])])]),t._v(" "),s("h2",{attrs:{id:"git当前状态、修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git当前状态、修改"}},[t._v("#")]),t._v(" git当前状态、修改")]),t._v(" "),s("ul",[s("li",[t._v("要随时掌握工作区的状态，使用 "),s("strong",[t._v("git status")]),t._v(" 命令。")]),t._v(" "),s("li",[t._v("如果git status告诉你有文件被修改过，用 "),s("strong",[t._v("git diff")]),t._v(" 可以查看修改内容。")])]),t._v(" "),s("h2",{attrs:{id:"版本回退"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版本回退"}},[t._v("#")]),t._v(" 版本回退")]),t._v(" "),s("p",[t._v("HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令 "),s("strong",[t._v("git reset --hard commit_id")]),t._v("。")]),t._v(" "),s("ul",[s("li",[t._v("穿梭前，用 "),s("strong",[t._v("git log")]),t._v(" 可以查看提交历史，以便确定要回退到哪个版本。")]),t._v(" "),s("li",[t._v("要重返未来，用 "),s("strong",[t._v("git reflog")]),t._v(" 查看命令历史，以便确定要回到未来的哪个版本。")]),t._v(" "),s("li",[t._v("查看简略信息 "),s("strong",[t._v("git log --graph --pretty=oneline --abbrev-commit")]),t._v(" , 简略信息、commit Id缩写")])]),t._v(" "),s("h2",{attrs:{id:"工作区和暂存区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工作区和暂存区"}},[t._v("#")]),t._v(" 工作区和暂存区")]),t._v(" "),s("p",[t._v("clone下来的目录或当前工作所在的目录就是工作区，目录下.git里面存了暂存区、HEAD、修改记录等信息")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("git checkout -- <file>")]),t._v(" 可以丢弃工作区的修改，恢复到上一次git add 或git commit的状态")]),t._v(" "),s("li",[s("strong",[t._v("git reset HEAD <file>")]),t._v(" 将暂存区git add里面的内容撤销掉  HEAD 表示当前版本")])]),t._v(" "),s("p",[t._v("场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- <file>。可以丢弃工作区的修改，恢复到上一次git add 或git commit的状态\n场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。\n场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退，不过前提是没有推送到远程库。")]),t._v(" "),s("h2",{attrs:{id:"删除一个文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除一个文件"}},[t._v("#")]),t._v(" 删除一个文件")]),t._v(" "),s("ul",[s("li",[t._v("撤销删除可以使用 "),s("strong",[t._v("git checkout -- <file>")]),t._v(" , 彻底删除文件除了 "),s("strong",[t._v("rm file")]),t._v("  或者 rm -rf外还需要使用 "),s("strong",[t._v("git rm")]),t._v(" 或 git rm -rf 类似于git add的功能")])]),t._v(" "),s("p",[t._v("命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。")]),t._v(" "),s("h2",{attrs:{id:"远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库"}},[t._v("#")]),t._v(" 远程仓库")]),t._v(" "),s("p",[t._v("本地git仓库和github仓库之间的传输是通过SSH加密的，所以，需要一点设置：")]),t._v(" "),s("ul",[s("li",[t._v("第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("ssh"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("keygen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("t rsa "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"youremail@example.com"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n 你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。\n */")]),t._v("\n")])])]),s("ul",[s("li",[t._v("第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面。然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容，点“Add Key”，你就应该看到已经添加的Key")])]),t._v(" "),s("h2",{attrs:{id:"本地仓库关联远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地仓库关联远程仓库"}},[t._v("#")]),t._v(" 本地仓库关联远程仓库")]),t._v(" "),s("ul",[s("li",[t._v("要关联一个远程库，使用命令 "),s("strong",[t._v("git remote add origin git@server-name:path/repo-name.git")]),t._v("；")]),t._v(" "),s("li",[t._v("关联后，使用命令 "),s("strong",[t._v("git push -u origin master")]),t._v(" 第一次推送master分支的所有内容；")])]),t._v(" "),s("p",[t._v("此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；\n分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！")]),t._v(" "),s("h2",{attrs:{id:"从远程库克隆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从远程库克隆"}},[t._v("#")]),t._v(" 从远程库克隆")]),t._v(" "),s("p",[t._v("要克隆一个仓库，首先必须知道仓库的地址，然后使用 "),s("strong",[t._v("git clone")]),t._v(" 命令克隆。Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。")]),t._v(" "),s("h2",{attrs:{id:"创建并合并分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建并合并分支"}},[t._v("#")]),t._v(" 创建并合并分支")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/git/git_new_branch_merge.png",alt:"git创建分支并合并.png"}})]),t._v(" "),s("p",[t._v("Git鼓励大量使用分支：")]),t._v(" "),s("ul",[s("li",[t._v("查看分支："),s("strong",[t._v("git branch")])]),t._v(" "),s("li",[t._v("创建分支："),s("strong",[t._v("git branch <name>")])]),t._v(" "),s("li",[t._v("切换分支："),s("strong",[t._v("git checkout <name>")])]),t._v(" "),s("li",[t._v("创建+切换分支："),s("strong",[t._v("git checkout -b <name>")])]),t._v(" "),s("li",[t._v("合并某分支到当前分支："),s("strong",[t._v("git merge <name>")])]),t._v(" "),s("li",[t._v("删除分支："),s("strong",[t._v("git branch -d <name>")])])]),t._v(" "),s("h2",{attrs:{id:"解决冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决冲突"}},[t._v("#")]),t._v(" 解决冲突")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/git/git_fix_conflict.png",alt:"git解决冲突.png"}})]),t._v(" "),s("ul",[s("li",[t._v("当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。")]),t._v(" "),s("li",[t._v("解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。")]),t._v(" "),s("li",[t._v("用git log --graph命令可以看到分支合并图。如果terminal显示空间不够，按回车会继续显示，要退出类似于vim的退出（q）")]),t._v(" "),s("li",[s("strong",[t._v("git log --graph --pretty=oneline --abbrev-commit")]),t._v(" 查看")])]),t._v(" "),s("h2",{attrs:{id:"分支管理策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支管理策略"}},[t._v("#")]),t._v(" 分支管理策略")]),t._v(" "),s("p",[t._v("合并分支时，加上 "),s("strong",[t._v("--no-ff")]),t._v(" 参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("git merge "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("no"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ff "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"merge with no-ff"')]),t._v(" dev\n")])])]),s("p",[s("img",{attrs:{src:"/images/git/merge_fast_forward.png",alt:"merge_fast_forward.png"}})]),t._v(" "),s("p",[t._v("在实际开发中，我们应该按照几个基本原则进行分支管理：")]),t._v(" "),s("ul",[s("li",[t._v("首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；")]),t._v(" "),s("li",[t._v("那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；")]),t._v(" "),s("li",[t._v("你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。")])]),t._v(" "),s("p",[t._v("所以，团队合作的分支看起来就像这样：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/git/git_teamwork.png",alt:"git团队协作.png"}})]),t._v(" "),s("h2",{attrs:{id:"bug分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bug分支"}},[t._v("#")]),t._v(" bug分支")]),t._v(" "),s("p",[t._v("修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；")]),t._v(" "),s("ul",[s("li",[t._v("当手头工作没有完成时，先把工作现场 "),s("strong",[t._v("git stash")]),t._v(" 一下，然后去修复bug，修复后，再 "),s("strong",[t._v("git stash pop")]),t._v(" ，回到工作现场；")]),t._v(" "),s("li",[t._v("在master分支上修复的bug，想要合并到当前dev分支，可以用**git cherry-pick <commit>**命令，把bug提交的修改“复制”到当前分支，避免重复劳动。")])]),t._v(" "),s("h2",{attrs:{id:"featrue分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#featrue分支"}},[t._v("#")]),t._v(" featrue分支")]),t._v(" "),s("p",[t._v("开发一个新feature，最好新建一个分支；\n如果要丢弃一个没有被合并过的分支，可以通过**git branch -D <name>**强行删除。")]),t._v(" "),s("h2",{attrs:{id:"多人协作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多人协作"}},[t._v("#")]),t._v(" 多人协作")]),t._v(" "),s("p",[t._v("多人协作的工作模式通常是这样：")]),t._v(" "),s("ul",[s("li",[t._v("1.首先，可以试图用 "),s("strong",[t._v("git push origin <branch-name>")]),t._v(" 推送自己的修改；")]),t._v(" "),s("li",[t._v("2.如果推送失败，则因为远程分支比你的本地更新，需要先用 "),s("strong",[t._v("git pull")]),t._v(" 试图合并；")]),t._v(" "),s("li",[t._v("3.如果合并有冲突，则解决冲突，并在本地提交；")]),t._v(" "),s("li",[t._v("4.没有冲突或者解决掉冲突后，再用**git push origin <branch-name>**推送就能成功！")])]),t._v(" "),s("p",[t._v("如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("git branch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("set"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("upstream"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("to "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" origin"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("这就是多人协作的工作模式，一旦熟悉了，就非常简单。")]),t._v(" "),s("p",[t._v("多人协作相关:")]),t._v(" "),s("ul",[s("li",[t._v("查看远程库信息，使用 "),s("strong",[t._v("git remote -v")]),t._v("；")]),t._v(" "),s("li",[t._v("本地新建的分支如果不推送到远程，对其他人就是不可见的；")]),t._v(" "),s("li",[t._v("从本地推送分支，使用"),s("strong",[t._v("git push origin branch-name")]),t._v("，如果推送失败，先用"),s("strong",[t._v("git pull")]),t._v("抓取远程的新提交；")]),t._v(" "),s("li",[t._v("在本地创建和远程分支对应的分支，使用"),s("strong",[t._v("git checkout -b branch-name origin/branch-name")]),t._v("，本地和远程分支的名称最好一致；")]),t._v(" "),s("li",[t._v("建立本地分支和远程分支的关联，使用"),s("strong",[t._v("git branch --set-upstream branch-name origin/branch-name")]),t._v("；")]),t._v(" "),s("li",[t._v("从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。")])]),t._v(" "),s("h2",{attrs:{id:"rebase-变基"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rebase-变基"}},[t._v("#")]),t._v(" rebase 变基")]),t._v(" "),s("ul",[s("li",[t._v("rebase操作可以把本地未push的分叉提交历史整理成直线；")]),t._v(" "),s("li",[t._v("rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。")])]),t._v(" "),s("h2",{attrs:{id:"创建标签-tag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建标签-tag"}},[t._v("#")]),t._v(" 创建标签 tag")]),t._v(" "),s("ul",[s("li",[t._v("命令 "),s("strong",[t._v("git tag <tagname>")]),t._v(" 用于新建一个标签，默认为HEAD，也可以指定一个commit id；")]),t._v(" "),s("li",[t._v("命令 "),s("strong",[t._v('git tag -a <tagname> -m "blablabla...0"')]),t._v(" 可以指定标签信息；")]),t._v(" "),s("li",[t._v("命令 "),s("strong",[t._v("git tag")]),t._v(" 可以查看所有标签。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n$ git tag v1.0 // 当前commit位置 打一个tag 名字为v1.0\n$ git tag // 查看所有标签\n$ git show v1.0 可以查看具体的信息\n$ git log --pretty=oneline --abbrev-commit  // 查看历史git信息，缩略的commitid  \n*/")]),t._v("\n")])])]),s("h2",{attrs:{id:"操作标签-tag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#操作标签-tag"}},[t._v("#")]),t._v(" 操作标签 tag")]),t._v(" "),s("ul",[s("li",[t._v("命令**git push origin <tagname>**可以推送一个本地标签；")]),t._v(" "),s("li",[t._v("命令"),s("strong",[t._v("git push origin --tags")]),t._v("可以推送全部未推送过的本地标签；")]),t._v(" "),s("li",[t._v("命令**git tag -d <tagname>**可以删除一个本地标签；")]),t._v(" "),s("li",[t._v("命令**git push origin :refs/tags/<tagname>**可以删除一个远程标签。")]),t._v(" "),s("li",[t._v("默认tag注释为提交的注释，-a -m 可以自定义注释，-m 单引号，逐行输入，可以有多行效果，如下")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\nkevindeMacBook-Air:foodDiary kevin$ git tag -a v1.1.0 -m '\n> 1. A 新增 iPad UI适配，将字体rpx，以及固定高度rpx改为px，优化大屏显示效果。iphone 5显示优化\n> 2. A 新增下拉刷新，弥补多端同步时，一端已缓存数据，另一端当天数据变更后，缓存的一端不会实时刷新的不足。\n> 3. A 新增网络异常提示，当检测没网络时，提示异常，但如果连接了wifi，但如果wifi也没网是无法检测的，只能等超时提示异常\n> '\nkevindeMacBook-Air:foodDiary kevin$ git show v1.1.0\ntag v1.1.0\nTagger: guoqzuo <guoqzuo@gmail.com>\nDate:   Wed Aug 21 15:17:08 2019 +0800\n\n1. A 新增 iPad UI适配，将字体rpx，以及固定高度rpx改为px，优化大屏显示效果。iphone 5显示优化\n2. A 新增下拉刷新，弥补多端同步时，一端已缓存数据，另一端当天数据变更后，缓存的一端不会实时刷新的不足。\n3. A 新增网络异常提示，当检测没网络时，提示异常，但如果连接了wifi，但如果wifi也没网是无法检测的，只能等超时提示异常\n\ncommit 512f64fb07f626dd48362bd6e22fb3c9bf188d1d (HEAD -> master, tag: v1.1.0, origin/master, origin/HEAD)\nAuthor: guoqzuo <guoqzuo@gmail.com>\nDate:   Mon Aug 19 20:50:39 2019 +0800\n*/")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"/images/git/git_tag_multi_line.png",alt:"git_tag_multi_line.png"}})]),t._v(" "),s("h2",{attrs:{id:"忽略特殊文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#忽略特殊文件"}},[t._v("#")]),t._v(" 忽略特殊文件")]),t._v(" "),s("ul",[s("li",[t._v("忽略某些文件时，需要编写**.gitignore**；")]),t._v(" "),s("li",[t._v(".gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\nkevindeMacBook-Air:KK kevin$ cat .gitignore\n\ndist\n  \n# myconfig\ndb.ini\nkevindeMacBook-Air:KK kevin$ mkdir dist\nkevindeMacBook-Air:KK kevin$ git add dist\nThe following paths are ignored by one of your .gitignore files:\ndist\nUse -f if you really want to add them.\n*/")]),t._v("\n")])])]),s("h2",{attrs:{id:"配置别名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置别名"}},[t._v("#")]),t._v(" 配置别名")]),t._v(" "),s("p",[t._v("如果敲git st就表示git status那就简单多了，当然这种偷懒的办法我们是极力赞成的。\n我们只需要敲一行命令，告诉Git，以后st就表示status：会将修改保存到~/.gitconfig里")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n$ git config --global alias.st status\n$ git config --global alias.co checkout\n$ git config --global alias.ci commit\n$ git config --global alias.br branch\n*/")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=i.exports}}]);